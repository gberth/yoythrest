import AserAMessage from "./AserAMessage";
import AserAStream from "./AserAStream";
import { AserAErrorDef, AckParameters, SslOptions, AserAItem } from "./types";
import Q from "q";
declare type LogDirect = {
    info: Function;
    error: Function;
    trace: Function;
    debug: Function;
    warn: Function;
};
export declare const setLogOveride: (logDirect: LogDirect) => void;
export declare const awaitcondition: (condtxt: string, cond: () => boolean, loop?: number, waitTime?: number, quiet?: boolean | undefined) => Q.Promise<unknown>;
export declare const readCertificates: (ssl: SslOptions) => SslOptions;
export declare const aId: () => string;
export declare const aseraLogger: {
    info: (this: AserAStream, logItem: any) => void;
    warn: (this: AserAStream, logItem: any) => void;
    error: (this: AserAStream, logItem: any) => void;
    trace: (this: AserAStream, logItem: any) => void;
    debug: (this: AserAStream, logItem: any) => void;
};
export declare const createAck: ({ msg, msg_type, response, payload, error }: AckParameters) => null | undefined;
export declare const ack: ({ msg, response, error }: AckParameters) => null | undefined;
export declare const isAck: (type: string | undefined) => boolean;
export declare const isResponse: (type: string | undefined) => boolean;
export declare const isError: (type: string) => boolean;
export declare const isAsync: (type: string) => boolean;
export declare const delay: (ms: number) => Promise<void>;
export declare const returnFileContent: (file: string, errf: (x0: any) => void) => Promise<any>;
export declare const listDirectory: (directory: string, file: string, errf: string) => Promise<unknown>;
export declare const ts: () => string;
export declare const aItem: ({ itemType, id, payload, version, owner }: {
    itemType: string;
    id: string;
    payload: {};
    version?: number | undefined;
    owner?: string | undefined;
}) => AserAItem;
export declare const keepForRetry: (msg: AserAMessage) => void;
export declare const yCatch: (errorParm: AserAErrorDef) => void;
export {};
